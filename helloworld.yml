---
- name: Provision EC2 Instance
  gather_facts: false
  vars_files:
    - vars/aws.yml
  hosts: localhost
  connection: local
  tasks:
    - name: Provision instance
      register: ec2
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        key_name: "{{key_name}}"
        aws_secret_key: "{{aws_secret_key}}"
        instance_type: t2.micro
        region: eu-west-1
        image: ami-0dc8d444ee2a42d8a
        wait: yes
        group: launch-wizard-1
        instance_tags:
          Name: "Explorium hello world"
        count: 1
        vpc_subnet_id: subnet-3794d26d
        assign_public_ip: yes
    - name: Wait for instance
      wait_for:
        host={{item.public_dns_name}}
        port=22
        delay=60
        timeout=320
        state=started
      with_items: "{{ec2.instances}}"
    - name: Add new instance to Ansible hosts
      add_host: hostname={{item.public_dns_name}} groups=ec2instances
      with_items: "{{ec2.instances}}"
- name: Deploy flask-helloworld to EC2
  hosts: ec2instances
  gather_facts: false
  remote_user: ubuntu
  vars_files:
    - vars/helloworld.yml
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -i example.pem'
  become: true
  become_method: sudo
  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes
    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present
    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest
    - name: Install Docker Module for Python
      pip:
        name: docker
    - name: Restart docker service
      command: service docker start
    - name: copying file to remote
      copy:
        src: ./{{item}}
        dest: /tmp/docker/
      loop: ['Dockerfile', 'flask-helloworld.py']
    - name: Build the image
      docker_image:
        build:
          path: /tmp/docker
          pull: yes
        name: helloworld
        source: build
    - name: Create Containers
      docker_container:
        name: helloworld-{{ item }}
        image: helloworld
        state: present
        ports:
         - "800{{item}}:5000"
      with_sequence: count={{instances}}
    - name: Start Containers
      docker_container:
        name: helloworld-{{ item }}
        image: helloworld
        state: started
        ports:
         - "800{{item}}:5000"
      with_sequence: count={{instances}}